@using OqtaneSSR.Client.Models
@using OqtaneSSR.Client.Components

<div style="width: 100%; border-width: 1px; border-style: dashed; border-color: gray;">
	<div style="text-align: center;"><small>(Module: @ModuleState.ModuleType)</small></div>
	<div style="text-align: center;"><small>(Render Mode: @ModuleState.RenderMode)</small></div>
	<br />
	
	@if (ModuleState.RenderMode == "InteractiveServer")
	{
		<DynamicRenderMode TypeName="@ModuleState.ModuleType" ModuleState="@ModuleState" PageState="@PageState" @rendermode="RenderMode.InteractiveServer"></DynamicRenderMode>
	}
	@if (ModuleState.RenderMode == "InteractiveWebAssembly")
	{
		<DynamicRenderMode TypeName="@ModuleState.ModuleType" ModuleState="@ModuleState" PageState="@PageState" @rendermode="RenderMode.InteractiveWebAssembly"></DynamicRenderMode>
	}
	@if (ModuleState.RenderMode == "InteractiveAuto")
	{
		<DynamicRenderMode TypeName="@ModuleState.ModuleType" ModuleState="@ModuleState" PageState="@PageState" @rendermode="RenderMode.InteractiveAuto"></DynamicRenderMode>
	}
	@if (ModuleState.RenderMode == "Server")
	{
		<DynamicRenderMode TypeName="@ModuleState.ModuleType" ModuleState="@ModuleState" PageState="@PageState"></DynamicRenderMode>
	}
</div>

@code {
	// this component is the render mode boundary between non-interactive and interactive rendering
	// the DynamicRenderMode component is where interactivity can be enabled based on the @rendermode attribute
	// container components contain a static reference to ModuleInstance so backward compatibility must be preserved
	// interactive logic which formerly resided within ModuleInstance had to be moved to the interactive side of the render mode boundary
	// this means that Modules which used to call ModuleInstance methods will need to use the ModuleBase abstractions

	[CascadingParameter]
	protected PageState PageState { get; set; }

	[CascadingParameter]
	protected Module ModuleState { get; set; }
}
