@using OqtaneSSR.Client.Models
@using OqtaneSSR.Client.Components
@using OqtaneSSR.Client.Shared

<div style="width: 100%; border-width: 1px; border-style: dashed; border-color: gray;">
	<div style="text-align: center;"><small>(Module: @ModuleState.ModuleType)</small></div>
	<div style="text-align: center;"><small>(Render Mode: @((ModuleState.RenderMode == "Static") ? ModuleState.RenderMode : PageState.InteractiveRenderMode))</small></div>
	<br />
	
	@if (ModuleState.RenderMode == "Interactive")
	{
		<DynamicRenderMode TypeName="@ModuleState.ModuleType" ModuleState="@ModuleState" PageState="@PageState" @rendermode="@Utilities.GetRenderMode(PageState.InteractiveRenderMode)"></DynamicRenderMode>
	}
	else
	{
		<DynamicRenderMode TypeName="@ModuleState.ModuleType" ModuleState="@ModuleState" PageState="@PageState"></DynamicRenderMode>
	}
</div>

@code {
	// this component is the render mode boundary between non-interactive and interactive rendering
	// the DynamicRenderMode component is where interactivity can be enabled based on the @rendermode attribute
	// the DynamicRenderMode component uses serializable parameters so that data can be marshalled across the boundary
	// Container components contain a static reference to ModuleInstance
	// interactive logic which formerly resided within ModuleInstance had to be moved to the interactive side of the boundary
	// this means that Modules which used to call ModuleInstance methods will now need to use the ModuleBase abstractions

	[CascadingParameter]
	protected PageState PageState { get; set; }

	[CascadingParameter]
	protected Module ModuleState { get; set; }
}
