@using Microsoft.AspNetCore.Http.Extensions
@using OqtaneSSR.Client.Models
@using OqtaneSSR.Client.Shared

@inject SiteState SiteState
@inject IConfiguration Configuration

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="OqtaneSSR.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <Head />
</head>

<body>
    @if (_defaultRenderMode == "Static")
    {
        <Body />
    }
    else
    {
        <Body @rendermode="@Utilities.GetRenderMode(_interactiveRenderMode)" />
    }
    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@code {
    private string _interactiveRenderMode;
    private string _defaultRenderMode;

    //  this CascadingParameter is required in order to access HttpContent
    [CascadingParameter] 
    HttpContext Context { get; set; }

    protected override void OnInitialized()
    {
        _defaultRenderMode = Configuration["DefaultRenderMode"];
        _interactiveRenderMode = Configuration["InteractiveRenderMode"];

        SiteState.RemoteIPAddress = Context.Connection.RemoteIpAddress?.ToString();
        //SiteState.AntiForgeryToken = AntiForgeryToken; // how do we retrieve this in a component?

        var url = Context.Request.GetEncodedUrl();
        var user = Context.User;
        var cookies = Context.Request.Cookies;
        var headers = Context.Request.Headers;
    }
}
 